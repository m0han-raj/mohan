---
import {  GoStar } from "react-icons/go";
import dataJson from "../../../data.json";
import type { GitHubQueryResponse } from "../../../typings/github";


interface Props {
  data: GitHubQueryResponse;
}

const {data} = Astro.props;

function parseGitHubData(data: any) {
  const userData = data.data.user;
  const repositories = userData.repositories.nodes;
  const followers = userData.followers.totalCount;

  const stars = repositories.reduce(
    (acc: any, repo: any) => acc + repo.stargazers.totalCount,
    0
  );

  const stats = {
    stars,
    followers,
  };

  return stats;
}

function calculatePercentiles(stats: any): number {
  const { stars, followers } = stats;

  const starPercentile = (1 + erf(Math.log(stars + 1) / Math.sqrt(2))) / 2;
  const followerPercentile = (1 + erf(Math.log(followers + 1) / Math.sqrt(2))) / 2;

  const globalPercentile = (starPercentile + followerPercentile) / 2;
  return globalPercentile;
}

function mapPercentileToRank(percent: number): string {
  const percentile = 100 - percent;
  if (percentile <= 1) return "S";
  if (percentile <= 12.5) return "A+";
  if (percentile <= 25) return "A";
  if (percentile <= 37.5) return "A-";
  if (percentile <= 50) return "B+";
  if (percentile <= 62.5) return "B";
  if (percentile <= 75) return "B-";
  if (percentile <= 87.5) return "C+";
  if (percentile <= 91) return "C";
  return "D";
}

function calculateRank(stats: any) {
  const percentile = calculatePercentiles(stats);
  const rank = mapPercentileToRank(percentile);
  return { rank, percentile };
}

function erf(x: number): number {
  const a1 = 0.254829592;
  const a2 = -0.284496736;
  const a3 = 1.421413741;
  const a4 = -1.453152027;
  const a5 = 1.061405429;
  const p = 0.3275911;

  const sign = x >= 0 ? 1 : -1;
  x = Math.abs(x);

  const t = 1.0 / (1.0 + p * x);
  const y = ((((a5 * t + a4) * t + a3) * t + a2) * t + a1) * t;
  return sign * (1.0 - y * Math.exp(-x * x));
}

const userdata = parseGitHubData(data);
const rank = calculateRank(userdata);
---

<div class="flex flex-row xl:gap-x-16 gap-x-8 gap-y-4 flex-wrap">
    <div class="flex flex-col gap-3">
      <div class="flex items-center gap-2">
        <GoStar className="w-5 h-5" />
        <span class="text-sm">{userdata.stars} Stars</span>
      </div>
      <div class="flex items-center gap-2">
        <span class="text-sm">{userdata.followers} Followers</span>
      </div>
      <div class="text-sm opacity-75">
        GitHub Rank: {rank.rank}
      </div>
    </div>
</div>